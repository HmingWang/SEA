<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <jmxConfigurator/>
    <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
            <pattern>%date [%X{datagramId}] [%thread] %-5level %logger{80} [%line]- %msg%n
            </pattern>
        </layout>
    </appender>

    <!--日志文件输出的文件名-->
    <springProperty scope="context" name="logName" source="log.logName" defaultValue="sea"/>
    <!--日志文件输出的文件路径-->
    <springProperty scope="context" name="log.base" source="log.dir" defaultValue="./logs/"/>
    <!--日志备份压缩文件(.gz)输出的文件路径-->
    <springProperty scope="context" name="log.gz.base" source="log.gz-dir"
                    defaultValue="./logs/backup"/>
    <!--日志保留天数-->
    <springProperty scope="context" name="log.maxHistory" source="log.maxHistory" defaultValue="180"/>
    <!--日志文件的最大大小，达到则压缩备份-->
    <springProperty scope="context" name="log.maxSize" source="log.maxSize" defaultValue="100MB"/>

    <appender name="sift.log" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator>
            <key>projectName</key>
            <defaultValue>default</defaultValue>
        </discriminator>
        <sift>
            <appender name="file.log"
                      class="ch.qos.logback.core.rolling.RollingFileAppender"><!-- All Log Info -->
                <File>${log.base}/${logName}.log</File>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <FileNamePattern>${log.gz.base}/${logName}_%d{yyyy-MM-dd}.%i.log.gz
                    </FileNamePattern>
                    <!--日志文件保留天数-->
                    <MaxHistory>${log.maxHistory}</MaxHistory>
                    <timeBasedFileNamingAndTriggeringPolicy
                            class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <!--日志文件的最大大小-->
                        <maxFileSize>${log.maxSize}</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <pattern>%date [%X{datagramId}] [%thread] %-5level %logger{80} [%line]- %msg%n
                    </pattern>
                </layout>
            </appender>
        </sift>
    </appender>

    <appender name="sift.error" class="ch.qos.logback.classic.sift.SiftingAppender">
        <discriminator>
            <key>projectName</key>
            <defaultValue>default</defaultValue>
        </discriminator>
        <sift>
            <appender name="file.error"
                      class="ch.qos.logback.core.rolling.RollingFileAppender">
                <File>${log.base}/${logName}_error.log</File>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <FileNamePattern>${log.gz.base}/${logName}_error_%d{yyyy-MM-dd}.%i.log.gz
                    </FileNamePattern>
                    <!--日志文件保留天数-->
                    <MaxHistory>${log.maxHistory}</MaxHistory>
                    <timeBasedFileNamingAndTriggeringPolicy
                            class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <!--日志文件的最大大小-->
                        <maxFileSize>${log.maxSize}</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
                <layout class="ch.qos.logback.classic.PatternLayout">
                    <pattern>%date [%X{datagramId}] [%thread] %-5level %logger{80} [%line]- %msg%n
                    </pattern>
                </layout>
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>ERROR</level>
                </filter>
            </appender>
        </sift>
    </appender>

    <!-- 异步输出 -->
    <appender name="file.async" class="ch.qos.logback.classic.AsyncAppender">
        <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
        <discardingThreshold>0</discardingThreshold>
        <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
        <queueSize>256</queueSize>
        <!-- 添加附加的appender,最多只能添加一个 -->
        <appender-ref ref="sift.log"/>
    </appender>


    <logger name="org.springframework.web.servlet.DispatcherServlet"
            level="INFO"/>
    <logger name="druid.sql" level="INFO"/>
    <!-- 会根据spring.profile.active配置来选择哪个日志输出配置, 如果匹配不上, 则使用第一个日志输出配置-->
    <!-- 开发环境 -->
    <springProfile name="dev">
        <root level="INFO">
            <appender-ref ref="stdout"/>
            <appender-ref ref="file.async"/>
            <appender-ref ref="sift.error"/>
        </root>
    </springProfile>
    <springProfile name="test | busi | preProd">
        <root level="DEBUG">
            <appender-ref ref="stdout"/>
            <appender-ref ref="file.async"/>
            <appender-ref ref="sift.error"/>
        </root>
    </springProfile>
    <!-- 其他环境 -->
    <springProfile name="prd">
        <root level="INFO">
            <appender-ref ref="file.async"/>
            <appender-ref ref="sift.error"/>
        </root>
    </springProfile>

</configuration>